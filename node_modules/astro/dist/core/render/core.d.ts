import type { APIContext, ComponentInstance, Params, Props, RouteData } from '../../@types/astro';
import type { LogOptions } from '../logger/core.js';
import type { RenderContext } from './context.js';
import type { Environment } from './environment.js';
import { RouteCache } from './route-cache.js';
interface GetParamsAndPropsOptions {
    mod: ComponentInstance;
    route?: RouteData | undefined;
    routeCache: RouteCache;
    pathname: string;
    logging: LogOptions;
    ssr: boolean;
}
export declare const enum GetParamsAndPropsError {
    NoMatchingStaticPath = 0
}
/**
 * It retrieves `Params` and `Props`, or throws an error
 * if they are not correctly retrieved.
 */
export declare function getParamsAndPropsOrThrow(options: GetParamsAndPropsOptions): Promise<[Params, Props]>;
export declare function getParamsAndProps(opts: GetParamsAndPropsOptions): Promise<[Params, Props] | GetParamsAndPropsError>;
export type RenderPage = {
    mod: ComponentInstance;
    renderContext: RenderContext;
    env: Environment;
    apiContext?: APIContext;
};
export declare function renderPage({ mod, renderContext, env, apiContext }: RenderPage): Promise<Response>;
/**
 * Checks whether any value can is serializable.
 *
 * A serializable value contains plain values. For example, `Proxy`, `Set`, `Map`, functions, etc.
 * are not serializable objects.
 *
 * @param object
 */
export declare function isValueSerializable(value: unknown): boolean;
export {};
